root: /show/ROOKIES

filter:
    - condition: show

      value: []

      name: BASIC
      
      description: 
          ARRI ALEXA

      settings:
          format_working: [2048, 1080, working]
          format_wrap: [2048, 1080, delivery]
          format_crop: [2048, 872, projection]
          format_overscan: [2253, 1188, overscan]
          ocio: /core/Linux/APPZ/ocio/ROOKIES/config.ocio
          viewer_process: rookies_working_srgb
          fps: 24

      template:
        review :
            - name: Read
              knob: ['file|str|{PATH}', 'first|int|{FIRST}', 'last|int|{LAST}', 'name|str|Read_FINAL', 'frame|str|{EXPR}']
            - name: OCIODisplay
              knob: ['colorspace|str|ACES/ACES - ACEScg', 'display|str|ACES', 'view|str|rookies_client', 'name|str|Read_OCIO']
            - name: Read
              knob: ['file|str|{ORG_PATH}', 'first|int|{ORG_FIRST}', 'last|int|{ORG_FIRST}', 'name|str|Read_ORIGIN']
            - name: OCIODisplay
              knob: ['colorspace|str|ACES/ACES - ACEScg', 'display|str|ACES', 'view|str|rookies_client', 'name|str|Read_ORIGIN_OCIO']
            - name: python
              knob:
                  - "optical=nuke.nodePaste('/core/Linux/Lib/PythonLib/fthcore/gizmo/OpticalLoader.nk')\n\
                     optical.setInput(0, nuke.toNode('Read_OCIO'))\n\
                     if eval(self.formats['DISTORT']): optical['btn_update_lde'].execute()\n\
                     if eval(self.formats['OPTICAL']): optical['btn_update_optical'].execute()"
            - name: slate_baker_v001
              knob: ['reel|str|{DATANAME}','lens|str|{LENS}','show|str|{SHOW}','seq|str|{SEQ}','shot|str|{SHOT}','team|str|{TEAM}','artist|str|{NAME}','version|str|{VERSION}',
                     'message|str|[value reel] / [value seq]_[value shot]',
                     'message_3|str|Frame: [expr [frame]]',
                     'message_2|str|[date %Y]/[date %m]/[date %d]',
                     'message_1|str|[basename [metadata input/filename]]',
                     'message_4|str|[if {[value lens]!=""} {return Lens:\ [value lens]\ mm} else {return}]    Timecode:  [metadata input/timecode]',
                     'input.first_1|int|{FIRST}', 'input.last_1|int|{LAST}', '_blackbar_style|str|Half', '_use|bool|False',
                     'wrap_box_width|int|2048', 'wrap_box_height|int|1080',
                     'crop_box_width|int|2048', 'crop_box_height|int|872']
              input: ['0|OpticalLoader', '1|Read_ORIGIN_OCIO']
            - name: python
              knob:
                  - "for read in ['Read_FINAL', 'Read_ORIGIN']:\n \
                      node=nuke.toNode(read)\n \
                      node['colorspace'].setValue('ACES - ACEScg' if node['file'].value().endswith('.exr') else 'Output - sRGB')"
            - name: python
              knob:
                  - "if str(self.formats['TEAM']) in ['postviz','ani','layout','matchmove']:\n \
                      nuke.toNode('Read_OCIO')['view'].setValue('sRGB')\n \
                      nuke.toNode('Read_ORIGIN_OCIO')['view'].setValue('sRGB')"
            - name: Reformat
              knob: ['type|str|to box', 'box_width|int|{SIZE}', 'disable|exp|box_width==200']
            - name: Write
              knob: ['file|str|{RENDER_PATH}', 'file_type|str|mov', 'colorspace|str|ACES - ACEScg', 'mov64_codec|str|apcs','mov64_fps|float|24', 'mov64_audiofile|str|{WAV}',
                     'use_limit|bool|True', 'first|exp|[topnode].first', 'last|exp|[topnode].last', 'raw|bool|True', 'name|str|Write_Final',
                     'afterFrameRender|str|print "Frame %s of %s" % (nuke.frame(), nuke.thisNode().lastFrame())']
            - name: python
              knob:
                  - "if nuke.toNode('Read_FINAL')['frame'].value() != '':\n \
                      w=nuke.toNode('Write_Final')\n \
                      w['last'].clearAnimated()\n \
                      w['last'].setValue(int(w['first'].value())+nuke.toNode('Read_FINAL')['frame'].value().count('?')-1)"

        test :
            - name: Read
              knob: ['file|str|{PATH}', 'first|int|{FIRST}', 'last|int|{LAST}', 'name|str|Read_FINAL', 'frame|str|{EXPR}']
            - name: OCIODisplay
              knob: ['colorspace|str|ACES/ACES - ACEScg', 'display|str|ACES', 'view|str|rookies_client', 'name|str|Read_OCIO']
            - name: Read
              knob: ['file|str|{ORG_PATH}', 'first|int|{ORG_FIRST}', 'last|int|{ORG_FIRST}', 'name|str|Read_ORIGIN']
            - name: OCIODisplay
              knob: ['colorspace|str|ACES/ACES - ACEScg', 'display|str|ACES', 'view|str|rookies_client', 'name|str|Read_ORIGIN_OCIO']
            - name: python
              knob:
                  - "optical=nuke.nodePaste('/core/Linux/Lib/PythonLib/fthcore/gizmo/OpticalLoader.nk')\n\
                     optical.setInput(0, nuke.toNode('Read_OCIO'))\n\
                     if eval(self.formats['DISTORT']): optical['btn_update_lde'].execute()\n\
                     if eval(self.formats['OPTICAL']): optical['btn_update_optical'].execute()"
            - name: slate_baker_v001
              knob: ['reel|str|{DATANAME}','lens|str|{LENS}','show|str|{SHOW}','seq|str|{SEQ}','shot|str|{SHOT}','team|str|{TEAM}','artist|str|{NAME}','version|str|{VERSION}',
                     'message|str|[value reel] / [value seq]_[value shot]',
                     'message_3|str|Frame: [expr [frame]]',
                     'message_2|str|[date %Y]/[date %m]/[date %d]',
                     'message_1|str|[basename [metadata input/filename]]',
                     'message_4|str|[if {[value lens]!=""} {return Lens:\ [value lens]\ mm} else {return}]    Timecode:  [metadata input/timecode]',
                     'input.first_1|int|{FIRST}', 'input.last_1|int|{LAST}', '_blackbar_style|str|Half', '_use|bool|False',
                     'wrap_box_width|int|2048', 'wrap_box_height|int|1080',
                     'crop_box_width|int|2048', 'crop_box_height|int|872']
              input: ['0|OpticalLoader', '1|Read_ORIGIN_OCIO']
            - name: python
              knob:
                  - "for read in ['Read_FINAL', 'Read_ORIGIN']:\n \
                      node=nuke.toNode(read)\n \
                      node['colorspace'].setValue('ACES - ACEScg' if node['file'].value().endswith('.exr') else 'Output - sRGB')"
            - name: python
              knob:
                  - "if str(self.formats['TEAM']) in ['postviz','ani','layout','matchmove']:\n \
                      nuke.toNode('Read_OCIO')['view'].setValue('sRGB')\n \
                      nuke.toNode('Read_ORIGIN_OCIO')['view'].setValue('sRGB')"
            - name: Reformat
              knob: ['type|str|to box', 'box_width|int|{SIZE}', 'disable|exp|box_width==200']
            - name: Write
              knob: ['file|str|{RENDER_PATH}', 'file_type|str|mov', 'colorspace|str|ACES - ACEScg', 'mov64_codec|str|apcs','mov64_fps|float|24', 'mov64_audiofile|str|{WAV}',
                     'use_limit|bool|True', 'first|exp|[topnode].first', 'last|exp|[topnode].last', 'raw|bool|True', 'name|str|Write_Final',
                     'afterFrameRender|str|print "Frame %s of %s" % (nuke.frame(), nuke.thisNode().lastFrame())']
            - name: python
              knob:
                  - "if nuke.toNode('Read_FINAL')['frame'].value() != '':\n \
                      w=nuke.toNode('Write_Final')\n \
                      w['last'].clearAnimated()\n \
                      w['last'].setValue(int(w['first'].value())+nuke.toNode('Read_FINAL')['frame'].value().count('?')-1)"
            - name: save
              knob: ['/show/ROOKIES/seq/HRC/HRC_0090/ani/wip/preview/MOV/HRC_0090_ani_v01_w03.nk']

        review_full_with_slate :
            - name: Read
              knob: ['file|str|{PATH}', 'first|int|{FIRST}', 'last|int|{LAST}', 'name|str|Read_FINAL', 'frame|str|{EXPR}']
            - name: Read
              knob: ['file|str|{ORG_PATH}', 'first|int|{ORG_FIRST}', 'last|int|{ORG_FIRST}', 'name|str|Read_ORIGIN']
            - name: slate_baker
              knob: ['h_show|str|{SHOW}', 'h_seq|str|{SEQ}', 'h_shot|str|{SHOT}', 'h_artist|str|{NAME}','_type|str|{TEAM}',
                     'input.first_1|int|{FIRST}', 'input.last_1|int|{LAST}', 'h_version|str|{VERSION}','_blackbar_style|str|Full',
                     'wrap_box_width|exp|Read_FINAL.width', 'wrap_box_height|exp|Read_FINAL.height+180',
                     'crop_box_width|exp|Read_FINAL.width', 'crop_box_height|exp|Read_FINAL.height']
              input: ['0|Read_FINAL', '1|Read_ORIGIN']
            - name: python
              knob:
                  - "for read in ['Read_FINAL', 'Read_ORIGIN']:\n \
                      node=nuke.toNode(read)\n \
                      node['colorspace'].setValue('ACES - ACEScg' if node['file'].value().endswith('.exr') else 'Output - sRGB')"
            - name: Write
              knob: ['file|str|{RENDER_PATH}', 'file_type|str|mov', 'mov64_codec|str|jpeg','mov64_fps|float|24','mov64_quality_max|int|2', 'mov64_write_nclc|bool|False',
                     'use_limit|bool|True', 'first|exp|[topnode].first-1', 'last|exp|[topnode].last', 'colorspace|str|Output - sRGB', 'name|str|Write_Final',
                     'afterFrameRender|str|print "Frame %s of %s" % (nuke.frame(), nuke.thisNode().lastFrame())']
            - name: python
              knob:
                  - "if nuke.toNode('Read_FINAL')['frame'].value() != '':\n \
                      w=nuke.toNode('Write_Final')\n \
                      w['last'].clearAnimated()\n \
                      w['last'].setValue(int(w['first'].value())+nuke.toNode('Read_FINAL')['frame'].value().count('?')-1)" 

        retime :
            - name: Read
              knob: ['file|str|{PATH}', 'first|int|{FIRST}', 'last|int|{LAST}', 'colorspace|str|linear']
            - name: Mirror2
              knob: ['flip|bool|{RENDER_FLIP}', 'flop|bool|{RENDER_FLOP}']
            - name: Retimer
              knob: ['tc_in|str|{TC_IN}', 'tc_out|str|{TC_OUT}', 'dur_just|int|{DUR}']
            - name: python
              knob:
                  - nuke.toNode('Retimer1')['analyze'].execute()
                  - "if str(self.formats['RENDER_CURVE']) == 'True':\n  \
                       nuke.toNode('Retimer1')['ascii_path'].setValue(self.formats['PATH_CURVE'])\n  \
                       nuke.toNode('Retimer1')['export_ascii'].execute()"
            - name: Write
              knob: ['file|str|{PATH_DATA}', 'file_type|str|exr', 'colorspace|str|linear', 'compression|int|1', 'metadata|int|3', 'noprefix|bool|True',
                     'use_limit|bool|True', 'first|exp|this.first_frame', 'last|exp|this.last_frame', 'disable|bool|{RENDER_DATA}', 'name|str|Write_data']
            - name: Reformat
              knob: ['type|str|to box', 'box_width|int|2048', 'name|str|jpg_to_2k']
            - name: Write
              knob: ['file|str|{PATH_PROXY}', 'file_type|str|jpeg', 'colorspace|str|sRGB',
                     'use_limit|bool|True', 'first|exp|this.first_frame', 'last|exp|this.last_frame', 'disable|bool|{RENDER_PROXY}']
            - name: Write
              knob: ['file|str|{PATH_MOV}', 'file_type|str|mov', 'mov64_codec|str|apcs','mov64_fps|float|24', 'colorspace|str|sRGB',
                     'use_limit|bool|True', 'first|exp|this.first_frame', 'last|exp|this.last_frame', 'disable|bool|{RENDER_MOV}', 'name|str|Write_mov']
            - name: python
              knob:
                  - "[nuke.toNode(node).setInput(0, nuke.toNode('FrameRange1')) for node in ['Write_data', 'jpg_to_2k', 'Write_mov']]"
            - name: save
              knob: ['{PATH_NK}']

        optical :
            - name: Read
              knob: ['file|str|{PATH}', 'first|int|{FIRST}', 'last|int|{LAST}']
            - name: Transform
              knob: ['translate|tuple|{OPT_TRANS}','rotate|float|{OPT_ROTATE}', 'scale|float|{OPT_SCALE}']
            - name: save
              knob: ['{PATH_NK}']

        nuke_write_delivery :
            - name: python
              knob:
                  - "nuke.selectAll()\nnuke.invertSelection()"
            - name: Remove
              knob: ['operation|str|keep','channels|str|rgb','label|str|clear layers', 'ypos|int|300', 'selected|bool|True']
            - name: Clamp
              knob: ['channels|str|rgba', 'maximum|int|1000', 'label|str|black clamp', 'ypos|int|20', 'selected|bool|True']
            - name: Reformat
              knob: ['type|str|to box', 'box_fixed|bool|True', 'box_width|int|2048',
                     'box_height|int|1080', 'black_outside|bool|True', 'label|str|crop bbox', 'ypos|int|40', 'selected|bool|True']
#            - name: ModifyMetaData
#              knob: ['name|str|ShotMetaData', 'ypos|int|40', 'selected|bool|True', 'label|str|addtional\nmetadata']
#            - name: python
#              knob:
#                  - "t='{set vfx/reel %s}\\n{set vfx/show %s}\\n{set vfx/seq %s}\\n{set vfx/shot %s}\\n{set vfx/dept %s}\\n{set vfx/artist %s}' % (os.environ['REEL'], os.environ['SHOW'], os.environ['SEQ'], os.environ['SHOT'], os.environ['PARTNAME'], os.environ['HOSTNAME'])"
#                  - "nuke.toNode('ShotMetaData')['metadata'].fromScript(t)"
            - name: Write
              knob: ['channels|str|all', 'file_type|str|exr', 'colorspace|str|ACES - ACEScg', 'compression|int|1', 'noprefix|bool|True',
                     'metadata|int|3', 'ypos|int|60', 'selected|bool|True', 'name|str|NukeWrite']
            - name: python
              knob: 
                  - "box_inc = 200"
                  - "bd = nukescripts.autoBackdrop()"
                  - "bd['bdwidth'].setValue(bd['bdwidth'].value()+box_inc)+100"
                  - "bd['bdheight'].setValue(bd['bdheight'].value()+box_inc)"
                  - "bd.setXYpos(bd.xpos()-box_inc/2, bd.ypos()-box_inc/2)"
                  - "bd['tile_color'].setValue(538976256)"
                  - "bd['note_font_size'].setValue(30)"
                  - "bd['label'].setValue('<b>%s_%s</b>\\n<font size=1 color=gray>WriteOutput</font>' % (os.environ.get('SEQ'), os.environ.get('SHOT')))"
                  - "nuke.zoomToFitSelected()"

        nuke_write_retime :
            - name: python
              knob:
                  - "nuke.selectAll()\nnuke.invertSelection()"

            - name: Dot
              knob: ['name|str|OutputDot', 'ypos|int|300', 'selected|bool|True']

            - name: python
              knob:
                  - "box_inc = 300"
                  - "bd = nukescripts.autoBackdrop()"
                  - "bd['bdwidth'].setValue(bd['bdwidth'].value()+box_inc)"
                  - "bd['bdheight'].setValue(bd['bdheight'].value()+box_inc)"
                  - "bd.setXYpos(bd.xpos()-box_inc/2, bd.ypos()-box_inc/2)"
                  - "bd['tile_color'].setValue(538976256)"
                  - "bd['note_font_size'].setValue(30)"
                  - "bd['label'].setValue('<b>%s_%s</b>\\n<font size=1 color=gray>WriteOutput</font>' % (os.environ.get('SEQ'), os.environ.get('SHOT')))"
                  - "nuke.zoomToFitSelected()"

            - name: Write
              knob: ['file_type|str|exr', 'colorspace|str|ACES - ACEScg', 'compression|int|1', 'noprefix|bool|True',
                     'metadata|int|3', 'name|str|NukeWrite']
              input: ['0|OutputDot']

            - name: Reformat
              knob: ['type|str|to box', 'box_width|int|2048']
              input: ['0|OutputDot']

            - name: Write
              knob: ['file_type|str|jpeg', 'colorspace|str|Output - sRGB', 'name|str|NukeWrite_proxy']

        nuke_write_remove :
            - name: python
              knob:
                  - "nuke.selectAll()\nnuke.invertSelection()"

            - name: Dot
              knob: ['name|str|OutputDot', 'ypos|int|300', 'selected|bool|True']

            - name: python
              knob: 
                  - "box_inc = 300"
                  - "bd = nukescripts.autoBackdrop()"
                  - "bd['bdwidth'].setValue(bd['bdwidth'].value()+box_inc)"
                  - "bd['bdheight'].setValue(bd['bdheight'].value()+box_inc)"
                  - "bd.setXYpos(bd.xpos()-box_inc/2, bd.ypos()-box_inc/2)"
                  - "bd['tile_color'].setValue(538976256)"
                  - "bd['note_font_size'].setValue(30)"
                  - "bd['label'].setValue('<b>%s_%s</b>\\n<font size=1 color=gray>WriteOutput</font>' % (os.environ.get('SEQ'), os.environ.get('SHOT')))"
                  - "nuke.zoomToFitSelected()"

            - name: Write
              knob: ['file_type|str|exr', 'colorspace|str|ACES - ACEScg', 'compression|int|1', 'noprefix|bool|True',
                     'metadata|int|3', 'name|str|NukeWrite']
              input: ['0|OutputDot']

            - name: FH_difference_checker
              knob: ['name|str|Difference_checker']
              input: ['0|OutputDot']

            - name: Grade
              knob: ['multiply|list|[0.5,0,1,1]', 'maskChannelInput|str|slate_difference.alpha']

            - name: Write
              knob: ['file_type|str|jpeg', 'colorspace|str|Output - sRGB', 'name|str|NukeWrite_diff']
              
        nuke_write_roto :
            - name: python
              knob:
                  - "nuke.selectAll()\nnuke.invertSelection()"

            - name: Dot
              knob: ['name|str|OutputDot', 'ypos|int|300', 'selected|bool|True']

            - name: python
              knob: 
                  - "box_inc = 300"
                  - "bd = nukescripts.autoBackdrop()"
                  - "bd['bdwidth'].setValue(bd['bdwidth'].value()+box_inc)"
                  - "bd['bdheight'].setValue(bd['bdheight'].value()+box_inc)"
                  - "bd.setXYpos(bd.xpos()-box_inc/2, bd.ypos()-box_inc/2)"
                  - "bd['tile_color'].setValue(538976256)"
                  - "bd['note_font_size'].setValue(30)"
                  - "bd['label'].setValue('<b>%s_%s</b>\\n<font size=1 color=gray>WriteOutput</font>' % (os.environ.get('SEQ'), os.environ.get('SHOT')))"
                  - "nuke.zoomToFitSelected()"

            - name: Shuffle
              knob: ['in|str|PUBLISH_RGBA', 'label|str|[value in]']
              input: ['0|OutputDot']
            - name: Remove
              knob: ['operation|str|remove', 'channels|str|PUBLISH_RGBA', 'channels2|str|GREY_CHECK', 'channels3|str|OVERLAY']
            - name: Write
              knob: ['file_type|str|exr', 'channels|str|all', 'colorspace|str|ACES - ACEScg', 'compression|int|1', 'noprefix|bool|True',
                     'metadata|int|3', 'name|str|NukeWrite_PUBLISH']
                     
            - name: Shuffle
              knob: ['in|str|GREY_CHECK', 'label|str|[value in]', 'name|str|Shuffle_GREY']
              input: ['0|OutputDot']
            - name: Write
              knob: ['file_type|str|jpeg', 'colorspace|str|Output - sRGB', 'name|str|NukeWrite_grey']
            - name: Shuffle
              knob: ['in|str|OVERLAY', 'label|str|[value in]', 'name|str|Shuffle_OVERLAY']
              input: ['0|OutputDot']
            - name: Write
              knob: ['file_type|str|jpeg', 'colorspace|str|Output - sRGB', 'name|str|NukeWrite_overlay']

        nuke_write_preview :
            - name: python
              knob:
                  - "nuke.selectAll()\nnuke.invertSelection()"
            - name: Write
              knob: ['file_type|str|jpeg', 'colorspace|str|Output - sRGB', 'selected|bool|True', 'name|str|NukeWrite']
            - name: python
              knob:
                  - "nuke.zoomToFitSelected()"

        nuke_write_with_lut :
            - name: python
              knob:
                  - "nuke.selectAll()\nnuke.invertSelection()"
            - name: OCIODisplay
              knob: ['colorspace|str|ACES/ACES - ACEScg', 'display|str|ACES', 'view|str|rookies_client']
            - name: Write
              knob: ['file_type|str|jpeg', 'colorspace|str|Output - sRGB', 'selected|bool|True', 'name|str|NukeWrite']
            - name: python
              knob:
                  - "nuke.zoomToFitSelected()"

    - condition: shotgun

      name: F3D

      value:
          - ['sg_shot_type', 'is', 'f3d']

      description:
          Full 3D

      settings:
          ocio: /core/Linux/APPZ/ocio/ROOKIES/config_none_odt.ocio

    - condition: shot

      name: REVIEW_PJPEG

      value: [FMI_0490,FMI_0550,FMI_0560,FMI_0570,FMI_0580,FMI_0590,FMI_0600,FMI_0610,FMI_0620,FMI_0630,FMI_0640,FMI_0650,FMI_0660,
              RDS_0030,RDS_0040,RDS_0050,RDS_0070,RDS_0080,RDS_0090,RDS_0100,RDS_0110,RDS_0120,RDS_0130,RDS_0140,RDS_0150,RDS_0160,
              RDS_0170,RDS_0200,RDS_0300,RDS_0320,RDS_0440,RDS_0330,RDS_0720,RDS_0730,RDS_0740,RDS_0750,RDS_0760,RDS_0770,RDS_0820,
              RDS_0830,RDS_0840,RDS_0860,RDS_0870,RDS_0880,RDS_0930,RDS_0920,RDS_0960,RDS_0950,RDS_0970,RDS_1000,RDS_1070,RDS_1050,
              RDS_1060,RDS_1120,RDS_1140,RDS_1160,RDS_1170,RDS_1180,RDS_1200,HRC_1210]

      description:
          REVIEW with PJPEG

      template:
        review :
        review :
            - name: Read
              knob: ['file|str|{PATH}', 'first|int|{FIRST}', 'last|int|{LAST}', 'name|str|Read_FINAL', 'frame|str|{EXPR}']
            - name: OCIODisplay
              knob: ['colorspace|str|ACES/ACES - ACEScg', 'display|str|ACES', 'view|str|rookies_client', 'name|str|Read_OCIO']
            - name: Read
              knob: ['file|str|{ORG_PATH}', 'first|int|{ORG_FIRST}', 'last|int|{ORG_FIRST}', 'name|str|Read_ORIGIN']
            - name: OCIODisplay
              knob: ['colorspace|str|ACES/ACES - ACEScg', 'display|str|ACES', 'view|str|rookies_client', 'name|str|Read_ORIGIN_OCIO']
            - name: python
              knob:
                  - "optical=nuke.nodePaste('/core/Linux/Lib/PythonLib/fthcore/gizmo/OpticalLoader.nk')\n\
                     optical.setInput(0, nuke.toNode('Read_OCIO'))\n\
                     if eval(self.formats['DISTORT']): optical['btn_update_lde'].execute()\n\
                     if eval(self.formats['OPTICAL']): optical['btn_update_optical'].execute()"
            - name: slate_baker_v001
              knob: ['reel|str|{DATANAME}','lens|str|{LENS}','show|str|{SHOW}','seq|str|{SEQ}','shot|str|{SHOT}','team|str|{TEAM}','artist|str|{NAME}','version|str|{VERSION}',
                     'message|str|[value reel] / [value seq]_[value shot]',
                     'message_3|str|Frame: [expr [frame]]',
                     'message_2|str|[date %Y]/[date %m]/[date %d]',
                     'message_1|str|[basename [metadata input/filename]]',
                     'message_4|str|[if {[value lens]!=""} {return Lens:\ [value lens]\ mm} else {return}]    Timecode:  [metadata input/timecode]',
                     'input.first_1|int|{FIRST}', 'input.last_1|int|{LAST}', '_blackbar_style|str|Half', '_use|bool|False',
                     'wrap_box_width|int|2048', 'wrap_box_height|int|1080',
                     'crop_box_width|int|2048', 'crop_box_height|int|872']
              input: ['0|OpticalLoader', '1|Read_ORIGIN_OCIO']
            - name: python
              knob:
                  - "for read in ['Read_FINAL', 'Read_ORIGIN']:\n \
                      node=nuke.toNode(read)\n \
                      node['colorspace'].setValue('ACES - ACEScg' if node['file'].value().endswith('.exr') else 'Output - sRGB')"
            - name: python
              knob:
                  - "if str(self.formats['TEAM']) in ['postviz','ani','layout','matchmove']:\n \
                      nuke.toNode('Read_OCIO')['view'].setValue('sRGB')\n \
                      nuke.toNode('Read_ORIGIN_OCIO')['view'].setValue('sRGB')"
            - name: Reformat
              knob: ['type|str|to box', 'box_width|int|{SIZE}', 'disable|exp|box_width==200']
            - name: Write
              knob: ['file|str|{RENDER_PATH}', 'file_type|str|mov', 'colorspace|str|ACES - ACEScg', 'mov64_codec|str|jpeg','mov64_fps|float|24', 'mov64_audiofile|str|{WAV}',
                     'mov64_quality_max|int|2', 'mov64_write_nclc|bool|False', 'use_limit|bool|True', 'first|exp|[topnode].first', 'last|exp|[topnode].last', 'raw|bool|True', 'name|str|Write_Final',
                     'afterFrameRender|str|print "Frame %s of %s" % (nuke.frame(), nuke.thisNode().lastFrame())']
            - name: python
              knob:
                  - "if nuke.toNode('Read_FINAL')['frame'].value() != '':\n \
                      w=nuke.toNode('Write_Final')\n \
                      w['last'].clearAnimated()\n \
                      w['last'].setValue(int(w['first'].value())+nuke.toNode('Read_FINAL')['frame'].value().count('?')-1)"
